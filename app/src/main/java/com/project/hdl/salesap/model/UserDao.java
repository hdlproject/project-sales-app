package com.project.hdl.salesap.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AM_USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "AM_USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Login_id = new Property(0, String.class, "login_id", true, "LOGIN_ID");
        public final static Property Job = new Property(1, String.class, "job", false, "JOB");
        public final static Property Office = new Property(2, String.class, "office", false, "OFFICE");
        public final static Property Branch = new Property(3, String.class, "branch", false, "BRANCH");
        public final static Property Target = new Property(4, String.class, "target", false, "TARGET");
        public final static Property Current_gain = new Property(5, String.class, "current_gain", false, "CURRENT_GAIN");
        public final static Property Full_name = new Property(6, String.class, "full_name", false, "FULL_NAME");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AM_USER\" (" + //
                "\"LOGIN_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: login_id
                "\"JOB\" TEXT," + // 1: job
                "\"OFFICE\" TEXT," + // 2: office
                "\"BRANCH\" TEXT," + // 3: branch
                "\"TARGET\" TEXT," + // 4: target
                "\"CURRENT_GAIN\" TEXT," + // 5: current_gain
                "\"FULL_NAME\" TEXT);"); // 6: full_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AM_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLogin_id());
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(2, job);
        }
 
        String office = entity.getOffice();
        if (office != null) {
            stmt.bindString(3, office);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(4, branch);
        }
 
        String target = entity.getTarget();
        if (target != null) {
            stmt.bindString(5, target);
        }
 
        String current_gain = entity.getCurrent_gain();
        if (current_gain != null) {
            stmt.bindString(6, current_gain);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(7, full_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getLogin_id());
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(2, job);
        }
 
        String office = entity.getOffice();
        if (office != null) {
            stmt.bindString(3, office);
        }
 
        String branch = entity.getBranch();
        if (branch != null) {
            stmt.bindString(4, branch);
        }
 
        String target = entity.getTarget();
        if (target != null) {
            stmt.bindString(5, target);
        }
 
        String current_gain = entity.getCurrent_gain();
        if (current_gain != null) {
            stmt.bindString(6, current_gain);
        }
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(7, full_name);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // login_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // job
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // office
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // branch
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // target
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // current_gain
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // full_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setLogin_id(cursor.getString(offset + 0));
        entity.setJob(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOffice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranch(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTarget(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrent_gain(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFull_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getLogin_id();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getLogin_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
