package com.project.hdl.salesap.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TR_TASK".
*/
public class TaskDao extends AbstractDao<Task, String> {

    public static final String TABLENAME = "TR_TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid_task = new Property(0, String.class, "uid_task", true, "UID_TASK");
        public final static Property Login_id = new Property(1, String.class, "login_id", false, "LOGIN_ID");
        public final static Property Cust_name = new Property(2, String.class, "cust_name", false, "CUST_NAME");
        public final static Property Dest_address = new Property(3, String.class, "dest_address", false, "DEST_ADDRESS");
        public final static Property Dtm_assign = new Property(4, String.class, "dtm_assign", false, "DTM_ASSIGN");
        public final static Property Lon = new Property(5, String.class, "lon", false, "LON");
        public final static Property Lat = new Property(6, String.class, "lat", false, "LAT");
        public final static Property Phone_numb = new Property(7, String.class, "phone_numb", false, "PHONE_NUMB");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
        public final static Property Dtm_upd = new Property(9, java.util.Date.class, "dtm_upd", false, "DTM_UPD");
        public final static Property Dtm_assign_tmp = new Property(10, java.util.Date.class, "dtm_assign_tmp", false, "DTM_ASSIGN_TMP");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TR_TASK\" (" + //
                "\"UID_TASK\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid_task
                "\"LOGIN_ID\" TEXT," + // 1: login_id
                "\"CUST_NAME\" TEXT," + // 2: cust_name
                "\"DEST_ADDRESS\" TEXT," + // 3: dest_address
                "\"DTM_ASSIGN\" TEXT," + // 4: dtm_assign
                "\"LON\" TEXT," + // 5: lon
                "\"LAT\" TEXT," + // 6: lat
                "\"PHONE_NUMB\" TEXT," + // 7: phone_numb
                "\"STATUS\" TEXT," + // 8: status
                "\"DTM_UPD\" INTEGER," + // 9: dtm_upd
                "\"DTM_ASSIGN_TMP\" INTEGER);"); // 10: dtm_assign_tmp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TR_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid_task());
 
        String login_id = entity.getLogin_id();
        if (login_id != null) {
            stmt.bindString(2, login_id);
        }
 
        String cust_name = entity.getCust_name();
        if (cust_name != null) {
            stmt.bindString(3, cust_name);
        }
 
        String dest_address = entity.getDest_address();
        if (dest_address != null) {
            stmt.bindString(4, dest_address);
        }
 
        String dtm_assign = entity.getDtm_assign();
        if (dtm_assign != null) {
            stmt.bindString(5, dtm_assign);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(6, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(7, lat);
        }
 
        String phone_numb = entity.getPhone_numb();
        if (phone_numb != null) {
            stmt.bindString(8, phone_numb);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        java.util.Date dtm_upd = entity.getDtm_upd();
        if (dtm_upd != null) {
            stmt.bindLong(10, dtm_upd.getTime());
        }
 
        java.util.Date dtm_assign_tmp = entity.getDtm_assign_tmp();
        if (dtm_assign_tmp != null) {
            stmt.bindLong(11, dtm_assign_tmp.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid_task());
 
        String login_id = entity.getLogin_id();
        if (login_id != null) {
            stmt.bindString(2, login_id);
        }
 
        String cust_name = entity.getCust_name();
        if (cust_name != null) {
            stmt.bindString(3, cust_name);
        }
 
        String dest_address = entity.getDest_address();
        if (dest_address != null) {
            stmt.bindString(4, dest_address);
        }
 
        String dtm_assign = entity.getDtm_assign();
        if (dtm_assign != null) {
            stmt.bindString(5, dtm_assign);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(6, lon);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(7, lat);
        }
 
        String phone_numb = entity.getPhone_numb();
        if (phone_numb != null) {
            stmt.bindString(8, phone_numb);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        java.util.Date dtm_upd = entity.getDtm_upd();
        if (dtm_upd != null) {
            stmt.bindLong(10, dtm_upd.getTime());
        }
 
        java.util.Date dtm_assign_tmp = entity.getDtm_assign_tmp();
        if (dtm_assign_tmp != null) {
            stmt.bindLong(11, dtm_assign_tmp.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.getString(offset + 0), // uid_task
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // login_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cust_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dest_address
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dtm_assign
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lon
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lat
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone_numb
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // status
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // dtm_upd
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // dtm_assign_tmp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setUid_task(cursor.getString(offset + 0));
        entity.setLogin_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCust_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDest_address(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDtm_assign(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLat(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone_numb(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDtm_upd(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setDtm_assign_tmp(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Task entity, long rowId) {
        return entity.getUid_task();
    }
    
    @Override
    public String getKey(Task entity) {
        if(entity != null) {
            return entity.getUid_task();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
