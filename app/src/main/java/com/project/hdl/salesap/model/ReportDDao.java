package com.project.hdl.salesap.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TR_REPORT_D".
*/
public class ReportDDao extends AbstractDao<ReportD, String> {

    public static final String TABLENAME = "TR_REPORT_D";

    /**
     * Properties of entity ReportD.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid_report_d = new Property(0, String.class, "uid_report_d", true, "UID_REPORT_D");
        public final static Property Uid_report_h = new Property(1, String.class, "uid_report_h", false, "UID_REPORT_H");
        public final static Property Product_name = new Property(2, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property Product_count = new Property(3, String.class, "product_count", false, "PRODUCT_COUNT");
        public final static Property Product_price = new Property(4, String.class, "product_price", false, "PRODUCT_PRICE");
    }


    public ReportDDao(DaoConfig config) {
        super(config);
    }
    
    public ReportDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TR_REPORT_D\" (" + //
                "\"UID_REPORT_D\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid_report_d
                "\"UID_REPORT_H\" TEXT," + // 1: uid_report_h
                "\"PRODUCT_NAME\" TEXT," + // 2: product_name
                "\"PRODUCT_COUNT\" TEXT," + // 3: product_count
                "\"PRODUCT_PRICE\" TEXT);"); // 4: product_price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TR_REPORT_D\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReportD entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid_report_d());
 
        String uid_report_h = entity.getUid_report_h();
        if (uid_report_h != null) {
            stmt.bindString(2, uid_report_h);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
 
        String product_count = entity.getProduct_count();
        if (product_count != null) {
            stmt.bindString(4, product_count);
        }
 
        String product_price = entity.getProduct_price();
        if (product_price != null) {
            stmt.bindString(5, product_price);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReportD entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid_report_d());
 
        String uid_report_h = entity.getUid_report_h();
        if (uid_report_h != null) {
            stmt.bindString(2, uid_report_h);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(3, product_name);
        }
 
        String product_count = entity.getProduct_count();
        if (product_count != null) {
            stmt.bindString(4, product_count);
        }
 
        String product_price = entity.getProduct_price();
        if (product_price != null) {
            stmt.bindString(5, product_price);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public ReportD readEntity(Cursor cursor, int offset) {
        ReportD entity = new ReportD( //
            cursor.getString(offset + 0), // uid_report_d
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid_report_h
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // product_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product_count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // product_price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReportD entity, int offset) {
        entity.setUid_report_d(cursor.getString(offset + 0));
        entity.setUid_report_h(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProduct_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProduct_count(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct_price(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ReportD entity, long rowId) {
        return entity.getUid_report_d();
    }
    
    @Override
    public String getKey(ReportD entity) {
        if(entity != null) {
            return entity.getUid_report_d();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReportD entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
