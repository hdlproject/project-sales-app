package com.project.hdl.salesap.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TR_REPORT_H".
*/
public class ReportHDao extends AbstractDao<ReportH, String> {

    public static final String TABLENAME = "TR_REPORT_H";

    /**
     * Properties of entity ReportH.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid_report_h = new Property(0, String.class, "uid_report_h", true, "UID_REPORT_H");
        public final static Property Uid_task = new Property(1, String.class, "uid_task", false, "UID_TASK");
        public final static Property Dtm_submit = new Property(2, String.class, "dtm_submit", false, "DTM_SUBMIT");
        public final static Property Total_price = new Property(3, String.class, "total_price", false, "TOTAL_PRICE");
        public final static Property Total_count = new Property(4, String.class, "total_count", false, "TOTAL_COUNT");
    }


    public ReportHDao(DaoConfig config) {
        super(config);
    }
    
    public ReportHDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TR_REPORT_H\" (" + //
                "\"UID_REPORT_H\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid_report_h
                "\"UID_TASK\" TEXT," + // 1: uid_task
                "\"DTM_SUBMIT\" TEXT," + // 2: dtm_submit
                "\"TOTAL_PRICE\" TEXT," + // 3: total_price
                "\"TOTAL_COUNT\" TEXT);"); // 4: total_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TR_REPORT_H\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReportH entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid_report_h());
 
        String uid_task = entity.getUid_task();
        if (uid_task != null) {
            stmt.bindString(2, uid_task);
        }
 
        String dtm_submit = entity.getDtm_submit();
        if (dtm_submit != null) {
            stmt.bindString(3, dtm_submit);
        }
 
        String total_price = entity.getTotal_price();
        if (total_price != null) {
            stmt.bindString(4, total_price);
        }
 
        String total_count = entity.getTotal_count();
        if (total_count != null) {
            stmt.bindString(5, total_count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReportH entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUid_report_h());
 
        String uid_task = entity.getUid_task();
        if (uid_task != null) {
            stmt.bindString(2, uid_task);
        }
 
        String dtm_submit = entity.getDtm_submit();
        if (dtm_submit != null) {
            stmt.bindString(3, dtm_submit);
        }
 
        String total_price = entity.getTotal_price();
        if (total_price != null) {
            stmt.bindString(4, total_price);
        }
 
        String total_count = entity.getTotal_count();
        if (total_count != null) {
            stmt.bindString(5, total_count);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public ReportH readEntity(Cursor cursor, int offset) {
        ReportH entity = new ReportH( //
            cursor.getString(offset + 0), // uid_report_h
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid_task
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dtm_submit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // total_price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // total_count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReportH entity, int offset) {
        entity.setUid_report_h(cursor.getString(offset + 0));
        entity.setUid_task(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDtm_submit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotal_price(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotal_count(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ReportH entity, long rowId) {
        return entity.getUid_report_h();
    }
    
    @Override
    public String getKey(ReportH entity) {
        if(entity != null) {
            return entity.getUid_report_h();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReportH entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
